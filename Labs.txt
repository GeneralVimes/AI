Інструкції до виконання лабораторної роботи "Генетичні алгоритми"
Дві початкові команди включені до main.js:
Створення ігрового світу з класичними правилами гри Баше
	window.world = new UniversalBachetWorld([1,2,3],true);
Проведення у цьому світі групового турніру різних ботів:
	window.world.startTournamentBetweenBots([new BachetBot1("BOT1"), new BachetBotRandom("RND1"),  new BachetBotRandomFixed("RND2"), new Bot123("BEST"), new BachetLearnerBot("LEARN"), new EvoBot("A1"), new EvoBot("A2"),new EvoBot("A3"),new EvoBot("A4"),new EvoBot("A5")],1000,2,false)
Нагадаємо класи ботів:
	BachetBot1 - бере завжди 1
	BachetBotRandom - бере випадкове число від 1 до 3
	BachetBotRandomFixed - бере випадкове число від 1 до 3, але не порушує правила, не намашається взяти більше каменів, ніж їх є у купі
	Bot123 - реалізує виграшний алгоритм гри за класичними правилами
	BachetLearnerBot - бот з пам'яттю, яка модифікується відповідно до результатів попередньої партії
	EvoBot - бот, що вміє передавати свою стратегію гри нащадкам. Їх ми зробили 5 штук.

У консолі ви отримаєте результати турніру цих 10-ти ботів.

Залиште лише 3 кращих EvoBot'ів, виконавши команду у консолі:
	window.world.keepNoMoreThanKBestBotsOfClass(EvoBot,3)
Переконайтеся, що залишилися лише EvoBot-и з кращими результатами, вивівши список всіх ботів у консоль
	window.world.allBots
Створіть нових EvoBot'ів взявши тих, що залишилися, як основу. Для цього виконайте команду:
	window.world.createDescendantsOfBotsOfClass(EvoBot,"B")
Роздивіться нових ботів:
	window.world.allBots
Їхні імена будуть починатися на B, а числа у іменах вказуватимуть, EvoBot'и з якими номерами бралися за основу. 
Роздивіться поле rules нових ботів та зрозумійте, які частини цього поля бралися від кого з батьків. 
Для ботів, що отримувалися не з пари ботів, а з одного, визначте, де проводилася мутація.

Тепер знов проведіть турнір між парами ботів
	window.world.startTournamentBetweenBots(window.world.allBots,100,2,false)

Знов залиште лише 5-6 кращих EvoBot'ів, створіть нових EvoBot'ів (почаши їх імена з C), проведіть новий турнір

Продовжуйте створювати нові покоління, доки результати EvoBot'ів не наблизяться до результату Bot123 ("BEST"). 
У популяції варто залишати 10-20 кращих EvoBot'ів

Оскільки турнір проводится грами між усіма можливими парами ботів, то при великій кількості ботів кількісь партій у серіях ігор варто зменшити з 1000 до 100 чи навіть до 30

Подивіться, як у полі rules найкращих EvoBot'ів реалізується виграшна стратегія

Коли EvoBotи будуть грати добре, змініть правила гри.
Нехай тепер той, хто забирає останній камінь, програє
	window.world.isLastPlayerWinner=false
Знов запустить турнір.
Подивіться, які результати дадуть боти із жорстко заданою стратегією.
Зробіть декілька змін поколінь.
Чи пристосуються EvoBot'и до нових умов?

Проведіть таку саму симуляцію, але з класом EvoBot2 замість EvoBot

Пропозиція до самостійного дослідження
Проведіть експеримент з навчання деякого з типів ботів (EvoBot, EvoBot2, BachetLearnerBot)
Визначте, за який час проходить навчання.
Потім замініть деякі з умов навчання. І знов визначте, за який час буде проходити навчання з новими параметрами.

Наприклад, на лекції ми почали порівнювати 2 екосистеми для навчання генетичних ботів:
10 EvoBot та 10 Bot123 (що реалізують ідеальну стратегію)
10 EvoBot, 1 Bot123 та 9 BachetBotRandom (що роблять випадкові ходи)

Цікаво порівняти, у якій з екосистем EvoBot навчиться швидше. 

Придумайте ідею власного експерименту, проведіть його, а презентацію щодо результатів представте на одному з занять.

Для автоматизації експерименту можна використати насттупний код у консолі:
//сттворюються необхідні боти та продовжується моделювання, поки середній результат EvoBot'ів не складе 95% середнього результату Bot123
window.world.allBots=[]
window.world.createKNewBotsOfClass(Bot123,10,"BEST")
window.world.createKNewBotsOfClass(EvoBot,10,"EVO")
for (let i=0; i<1000; i++){
    console.log("ROUND",i)
    window.world.startTournamentBetweenBots(window.world.allBots,100,2,false)
    
    let EvoRes = window.world.findAverageTournamentResultOfBotsOfClass(EvoBot);
    let BestRes = window.world.findAverageTournamentResultOfBotsOfClass(Bot123);
    if (BestRes>0){
        console.log(EvoRes, BestRes, EvoRes/BestRes);
        if (EvoRes/BestRes>0.95){
            break;
        }
    }
    
    window.world.keepNoMoreThanKBestBotsOfClass(EvoBot,10)
    window.world.createDescendantsOfBotsOfClass(EvoBot,"C"+i)
}

Приклад ідеї другого експерименту
Клас EvoBot використосує 6 видів мутації. Відключіть якийсь з цих видів мутацій та порівняйте, як це вплине на швидкість навчання.

Наприклад, давайте 
Для цього створіть нового бота EvoBotMod
Код в нього буде такий самий, як і в EvoBotMod за єдиним виключенням
Так, де в конструкторі визначається імовірність мутації, поставимо 
let mutationId = this.randomNumberFromToIncl(1,5);
замість
let mutationId = this.randomNumberFromToIncl(0,5);

Таким чином, мутація за номером 0 не буде обиратися

Тепер запустіть симуляцію наступним чином:
window.world = new UniversalBachetWorld([1,2,3],true);
window.world.createKNewBotsOfClass(Bot123,1,"BEST")
window.world.createKNewBotsOfClass(EvoBot,10,"EVO")
window.world.createKNewBotsOfClass(EvoBotMod,10,"MOD")
window.world.startTournamentBetweenBots(window.world.allBots,100,2,false)

Тепер будемо фіксувати, як середній результат EvoBot та EvoBotMod змінюється з часом


let scores=[]
for (let i=0;  i<100; i++){
    console.log("ROUND_"+i)
    let evoRes = window.world.findAverageTournamentResultOfBotsOfClass(EvoBot);
    let modRes = window.world.findAverageTournamentResultOfBotsOfClass(EvoBotMod);
    let bestRes = window.world.findAverageTournamentResultOfBotsOfClass(Bot123);
    scores.push([evoRes/bestRes,modRes/bestRes])
window.world.keepNoMoreThanKBestBotsOfClass(EvoBot,10)
    window.world.keepNoMoreThanKBestBotsOfClass(EvoBotMod,10)
    window.world.createDescendantsOfBotsOfClass(EvoBot,"A"+i)
    window.world.createDescendantsOfBotsOfClass(EvoBotMod,"B"+i)
    window.world.startTournamentBetweenBots(window.world.allBots,100,2,false)
}
console.log(scores)

Отримані дані з масиву scores обробіть у Excel та виведіть як графік
Для більш повної картини може знадобитися провести більше іж 100 раундів
